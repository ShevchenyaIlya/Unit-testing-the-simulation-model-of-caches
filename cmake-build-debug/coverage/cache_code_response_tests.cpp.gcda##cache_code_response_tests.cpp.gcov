        -:    0:Source:/home/shevchenya/CLionProjects/CourseWorkCache/google_tests/cache_code_response_tests.cpp
        -:    0:Graph:/home/shevchenya/CLionProjects/CourseWorkCache/cmake-build-debug/google_tests/CMakeFiles/google_tests_run.dir/cache_code_response_tests.cpp.gcno
        -:    0:Data:/home/shevchenya/CLionProjects/CourseWorkCache/cmake-build-debug/google_tests/CMakeFiles/google_tests_run.dir/cache_code_response_tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by shevchenya on 15/11/2020.
        -:    3://
        -:    4:
        -:    5:#include <random>
        -:    6:
        -:    7:#include "gtest/gtest.h"
        -:    8:#include "../src/Memory.h"
        -:    9:#include <optional>
        -:   10:
    #####:   11:class CacheMemoryFixture : public ::testing::Test {
    $$$$$:   11-block  0
    $$$$$:   11-block  1
    $$$$$:   11-block  2
    $$$$$:   11-block  3
    $$$$$:   11-block  4
    $$$$$:   11-block  5
        -:   12:protected:
    #####:   13:    void SetUp() override {
    $$$$$:   13-block  0
    #####:   14:        MemoryStorage mem;
    $$$$$:   14-block  0
    %%%%%:   14-block  1
    #####:   15:        UncachedMem uncachedMem = UncachedMem (mem);
    $$$$$:   15-block  0
    %%%%%:   15-block  1
    #####:   16:        memModelPtr = std::make_unique<CachedMem> ( uncachedMem);
    $$$$$:   16-block  0
    #####:   17:    }
        -:   18:    std::unique_ptr<CachedMem> memModelPtr;
        -:   19:};
        -:   20:
        8:   21:TEST_F(CacheMemoryFixture, waitResponse) {
        1:   21-block  0
        1:   21-block  1
        1:   21-block  2
        1:   21-block  3
        1:   21-block  4
    %%%%%:   21-block  5
    %%%%%:   21-block  6
    %%%%%:   21-block  7
    %%%%%:   21-block  8
    %%%%%:   21-block  9
    %%%%%:   21-block 10
        1:   21-block 11
        1:   21-block 12
        1:   21-block 13
        1:   21-block 14
        1:   21-block 15
        2:   22:    CachedMem cache = *memModelPtr;
        1:   22-block  0
        1:   22-block  1
        1:   22-block  2
    $$$$$:   22-block  3
        1:   22-block  4
    %%%%%:   22-block  5
    %%%%%:   22-block  6
        1:   23:    cache.setWaitCycles(5);
        1:   23-block  0
        -:   24:
        1:   25:    ASSERT_EQ(cache.Response(20), std::optional<Word>());
        1:   25-block  0
        1:   25-block  1
    $$$$$:   25-block  2
    $$$$$:   25-block  3
    $$$$$:   25-block  4
    $$$$$:   25-block  5
        1:   25-block  6
        1:   25-block  7
        1:   25-block  8
        1:   25-block  9
    $$$$$:   25-block 10
        1:   25-block 11
    %%%%%:   25-block 12
    %%%%%:   25-block 13
    %%%%%:   25-block 14
    %%%%%:   25-block 15
    %%%%%:   25-block 16
    %%%%%:   25-block 17
    %%%%%:   25-block 18
    %%%%%:   25-block 19
    %%%%%:   25-block 20
        -:   26:}
        -:   27:
        8:   28:TEST_F(CacheMemoryFixture, cacheMiss) {
        1:   28-block  0
        1:   28-block  1
        1:   28-block  2
        1:   28-block  3
        1:   28-block  4
    %%%%%:   28-block  5
    %%%%%:   28-block  6
    %%%%%:   28-block  7
    %%%%%:   28-block  8
    %%%%%:   28-block  9
    %%%%%:   28-block 10
        1:   28-block 11
        1:   28-block 12
        1:   28-block 13
        1:   28-block 14
        1:   28-block 15
        2:   29:    CachedMem cache = *memModelPtr;
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
    $$$$$:   29-block  3
        1:   29-block  4
    %%%%%:   29-block  5
    %%%%%:   29-block  6
        -:   30:
        1:   31:    int blockLine = rand() % blockCount;
        1:   31-block  0
        1:   32:    Word requestedId = 520;
        1:   33:    Word requestOffset = ToLineOffset(requestedId);
        1:   34:    cache.setRequestedIp(ToLineAddr(requestedId));
        1:   35:    cache.setRequestedOffset(requestOffset);
        1:   36:    cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].address = ToLineAddr(requestedId);
        1:   37:    cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].dataLine[requestOffset] = 1024;
        1:   38:    cache.setCacheMiss(false);
        -:   39:
        1:   40:    ASSERT_EQ(cache.Response(20), 1024);
        1:   40-block  0
        1:   40-block  1
    $$$$$:   40-block  2
    $$$$$:   40-block  3
    $$$$$:   40-block  4
    $$$$$:   40-block  5
        1:   40-block  6
        1:   40-block  7
        1:   40-block  8
    %%%%%:   40-block  9
    %%%%%:   40-block 10
    %%%%%:   40-block 11
    %%%%%:   40-block 12
    %%%%%:   40-block 13
    %%%%%:   40-block 14
    %%%%%:   40-block 15
    %%%%%:   40-block 16
    %%%%%:   40-block 17
    %%%%%:   40-block 18
        1:   41:    ASSERT_EQ(cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].lastUsage, 1);
        1:   41-block  0
    $$$$$:   41-block  1
        1:   41-block  2
    $$$$$:   41-block  3
    $$$$$:   41-block  4
    $$$$$:   41-block  5
    $$$$$:   41-block  6
        1:   41-block  7
        1:   41-block  8
        1:   41-block  9
        1:   41-block 10
    $$$$$:   41-block 11
        1:   41-block 12
    %%%%%:   41-block 13
    %%%%%:   41-block 14
    %%%%%:   41-block 15
    %%%%%:   41-block 16
    %%%%%:   41-block 17
    %%%%%:   41-block 18
    %%%%%:   41-block 19
        -:   42:}
        -:   43:
        8:   44:TEST_F(CacheMemoryFixture, fullCacheMiss) {
        1:   44-block  0
        1:   44-block  1
        1:   44-block  2
        1:   44-block  3
        1:   44-block  4
    %%%%%:   44-block  5
    %%%%%:   44-block  6
    %%%%%:   44-block  7
    %%%%%:   44-block  8
    %%%%%:   44-block  9
    %%%%%:   44-block 10
        1:   44-block 11
        1:   44-block 12
        1:   44-block 13
        1:   44-block 14
        1:   44-block 15
        2:   45:    CachedMem cache = *memModelPtr;
        1:   45-block  0
        1:   45-block  1
        1:   45-block  2
    $$$$$:   45-block  3
        1:   45-block  4
    %%%%%:   45-block  5
    %%%%%:   45-block  6
        -:   46:
        1:   47:    int blockLine = rand() % blockCount;
        1:   47-block  0
        1:   48:    Word requestedId = 520;
        1:   49:    Word requestOffset = ToLineOffset(requestedId);
        1:   50:    cache.setRequestedIp(ToLineAddr(requestedId));
        1:   51:    cache.setRequestedOffset(requestOffset);
        1:   52:    cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].address = ToLineAddr(requestedId);
        1:   53:    cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].dataLine[requestOffset] = 1024;
        1:   54:    cache.setCacheMiss(false);
        -:   55:
        5:   56:    for (Block &block : cache.getCodeMemory()) {
        5:   56-block  0
        4:   56-block  1
        4:   57:        block[requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].lastUsage = 1;
        -:   58:    }
        -:   59:
        -:   60:
        1:   61:    ASSERT_EQ(cache.Response(20), 1024);
        1:   61-block  0
        1:   61-block  1
        1:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
    $$$$$:   61-block  5
    $$$$$:   61-block  6
        1:   61-block  7
        1:   61-block  8
        1:   61-block  9
    %%%%%:   61-block 10
    %%%%%:   61-block 11
    %%%%%:   61-block 12
    %%%%%:   61-block 13
    %%%%%:   61-block 14
    %%%%%:   61-block 15
    %%%%%:   61-block 16
    %%%%%:   61-block 17
    %%%%%:   61-block 18
    %%%%%:   61-block 19
        1:   62:    ASSERT_EQ(cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].lastUsage, 1);
        1:   62-block  0
    $$$$$:   62-block  1
        1:   62-block  2
    $$$$$:   62-block  3
    $$$$$:   62-block  4
    $$$$$:   62-block  5
    $$$$$:   62-block  6
        1:   62-block  7
        1:   62-block  8
        1:   62-block  9
    %%%%%:   62-block 10
    %%%%%:   62-block 11
    %%%%%:   62-block 12
    %%%%%:   62-block 13
    %%%%%:   62-block 14
    %%%%%:   62-block 15
    %%%%%:   62-block 16
    %%%%%:   62-block 17
        -:   63:
        5:   64:    for (int i = 0; i < cache.getCodeMemory().size(); i++) {
        1:   64-block  0
    $$$$$:   64-block  1
        5:   64-block  2
        4:   64-block  3
        1:   64-block  4
        1:   64-block  5
        4:   65:        if (i == blockLine)
        4:   65-block  0
        1:   66:            ASSERT_EQ(cache.getCodeMemory()[i][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].lastUsage, 1);
        1:   66-block  0
        1:   66-block  1
    $$$$$:   66-block  2
    $$$$$:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
        1:   66-block  6
        1:   66-block  7
        1:   66-block  8
        1:   66-block  9
    $$$$$:   66-block 10
    %%%%%:   66-block 11
    %%%%%:   66-block 12
    %%%%%:   66-block 13
    %%%%%:   66-block 14
    %%%%%:   66-block 15
    %%%%%:   66-block 16
    %%%%%:   66-block 17
    %%%%%:   66-block 18
        -:   67:        else
        3:   68:            ASSERT_EQ(cache.getCodeMemory()[i][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].lastUsage, 0);
        3:   68-block  0
        3:   68-block  1
    $$$$$:   68-block  2
    $$$$$:   68-block  3
    $$$$$:   68-block  4
    $$$$$:   68-block  5
        3:   68-block  6
        3:   68-block  7
        3:   68-block  8
        3:   68-block  9
    $$$$$:   68-block 10
    %%%%%:   68-block 11
    %%%%%:   68-block 12
    %%%%%:   68-block 13
    %%%%%:   68-block 14
    %%%%%:   68-block 15
    %%%%%:   68-block 16
    %%%%%:   68-block 17
        -:   69:    }
        -:   70:}
        -:   71:
        8:   72:TEST_F(CacheMemoryFixture, EmptyCacheHit) {
        1:   72-block  0
        1:   72-block  1
        1:   72-block  2
        1:   72-block  3
        1:   72-block  4
    %%%%%:   72-block  5
    %%%%%:   72-block  6
    %%%%%:   72-block  7
    %%%%%:   72-block  8
    %%%%%:   72-block  9
    %%%%%:   72-block 10
        1:   72-block 11
        1:   72-block 12
        1:   72-block 13
        1:   72-block 14
        1:   72-block 15
        2:   73:    MemoryStorage mem;
        1:   73-block  0
        1:   73-block  1
        1:   73-block  2
    $$$$$:   73-block  3
        1:   73-block  4
    %%%%%:   73-block  5
        1:   74:    mem.LoadElf("/home/shevchenya/CLionProjects/CourseWorkCache/programs/build/assembly/bin/simple.riscv");
        1:   74-block  0
        1:   74-block  1
        1:   74-block  2
    %%%%%:   74-block  3
    %%%%%:   74-block  4
    %%%%%:   74-block  5
    %%%%%:   74-block  6
        2:   75:    UncachedMem uncachedMem = UncachedMem (mem);
        1:   75-block  0
    $$$$$:   75-block  1
        1:   75-block  2
        1:   75-block  3
    %%%%%:   75-block  4
        2:   76:    std::unique_ptr<CachedMem> memModelPtr( new CachedMem(uncachedMem));
        1:   76-block  0
        1:   76-block  1
        1:   76-block  2
    $$$$$:   76-block  3
        1:   76-block  4
        1:   76-block  5
    %%%%%:   76-block  6
    %%%%%:   76-block  7
    %%%%%:   76-block  8
        2:   77:    CachedMem cache = *memModelPtr;
        1:   77-block  0
    $$$$$:   77-block  1
        1:   77-block  2
        1:   77-block  3
    %%%%%:   77-block  4
        -:   78:
        1:   79:    int blockLine = rand() % blockCount;
        1:   79-block  0
        1:   80:    Word requestedId = 520;
        1:   81:    Word requestOffset = ToLineOffset(requestedId);
        1:   82:    cache.setRequestedIp(ToLineAddr(requestedId));
        1:   83:    cache.setRequestedOffset(requestOffset);
        1:   84:    cache.setCacheMiss(true);
        -:   85:
        1:   86:    ASSERT_EQ(cache.Response(20), 19);
        1:   86-block  0
        1:   86-block  1
    $$$$$:   86-block  2
    $$$$$:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
        1:   86-block  6
        1:   86-block  7
        1:   86-block  8
    %%%%%:   86-block  9
    %%%%%:   86-block 10
    %%%%%:   86-block 11
    %%%%%:   86-block 12
    %%%%%:   86-block 13
    %%%%%:   86-block 14
    %%%%%:   86-block 15
    %%%%%:   86-block 16
    %%%%%:   86-block 17
    %%%%%:   86-block 18
        1:   87:    ASSERT_EQ(cache.getCodeMemory()[0][0].lastUsage, 1);
        1:   87-block  0
    $$$$$:   87-block  1
        1:   87-block  2
    $$$$$:   87-block  3
    $$$$$:   87-block  4
    $$$$$:   87-block  5
    $$$$$:   87-block  6
        1:   87-block  7
        1:   87-block  8
        1:   87-block  9
    %%%%%:   87-block 10
    %%%%%:   87-block 11
    %%%%%:   87-block 12
    %%%%%:   87-block 13
    %%%%%:   87-block 14
    %%%%%:   87-block 15
    %%%%%:   87-block 16
    %%%%%:   87-block 17
        1:   88:    ASSERT_EQ(cache.getCodeMemory()[0][0].address, ToLineAddr(requestedId));
        1:   88-block  0
    $$$$$:   88-block  1
        1:   88-block  2
    $$$$$:   88-block  3
    $$$$$:   88-block  4
    $$$$$:   88-block  5
    $$$$$:   88-block  6
        1:   88-block  7
        1:   88-block  8
        1:   88-block  9
    %%%%%:   88-block 10
    %%%%%:   88-block 11
    %%%%%:   88-block 12
    %%%%%:   88-block 13
    %%%%%:   88-block 14
    %%%%%:   88-block 15
    %%%%%:   88-block 16
        1:   89:    ASSERT_TRUE(cache.getCodeMemory()[0][0].validityBit);
        1:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
    $$$$$:   89-block  3
    $$$$$:   89-block  4
    $$$$$:   89-block  5
    $$$$$:   89-block  6
        1:   89-block  7
        1:   89-block  8
        1:   89-block  9
        1:   89-block 10
    $$$$$:   89-block 11
        1:   89-block 12
    %%%%%:   89-block 13
    %%%%%:   89-block 14
    %%%%%:   89-block 15
    %%%%%:   89-block 16
    %%%%%:   89-block 17
    %%%%%:   89-block 18
    %%%%%:   89-block 19
    %%%%%:   89-block 20
        -:   90:}
        -:   91:
        8:   92:TEST_F(CacheMemoryFixture, FullCacheHit) {
        1:   92-block  0
        1:   92-block  1
        1:   92-block  2
        1:   92-block  3
        1:   92-block  4
    %%%%%:   92-block  5
    %%%%%:   92-block  6
    %%%%%:   92-block  7
    %%%%%:   92-block  8
    %%%%%:   92-block  9
        1:   92-block 10
        1:   92-block 11
        1:   92-block 12
        1:   92-block 13
        1:   92-block 14
        2:   93:    MemoryStorage mem;
        1:   93-block  0
        1:   93-block  1
        1:   93-block  2
    $$$$$:   93-block  3
        1:   93-block  4
    %%%%%:   93-block  5
        1:   94:    mem.LoadElf("/home/shevchenya/CLionProjects/CourseWorkCache/programs/build/assembly/bin/simple.riscv");
        1:   94-block  0
        1:   94-block  1
        1:   94-block  2
    %%%%%:   94-block  3
    %%%%%:   94-block  4
    %%%%%:   94-block  5
    %%%%%:   94-block  6
        2:   95:    UncachedMem uncachedMem = UncachedMem (mem);
        1:   95-block  0
    $$$$$:   95-block  1
        1:   95-block  2
        1:   95-block  3
    %%%%%:   95-block  4
        2:   96:    std::unique_ptr<CachedMem> memModelPtr( new CachedMem(uncachedMem));
        1:   96-block  0
        1:   96-block  1
        1:   96-block  2
    $$$$$:   96-block  3
        1:   96-block  4
        1:   96-block  5
    %%%%%:   96-block  6
    %%%%%:   96-block  7
    %%%%%:   96-block  8
        2:   97:    CachedMem cache = *memModelPtr;
        1:   97-block  0
    $$$$$:   97-block  1
        1:   97-block  2
        1:   97-block  3
    %%%%%:   97-block  4
        -:   98:
        1:   99:    int blockLine = rand() % blockCount;
        1:   99-block  0
        1:  100:    Word requestedId = 520;
        1:  101:    Word requestOffset = ToLineOffset(requestedId);
        1:  102:    cache.setRequestedIp(ToLineAddr(requestedId));
        1:  103:    cache.setRequestedOffset(requestOffset);
        1:  104:    cache.setCacheMiss(true);
        5:  105:    for (Block &block : cache.getCodeMemory()) {
        5:  105-block  0
        4:  105-block  1
        4:  106:        Word address = requestedId % (codeCacheBytes / blockCount) / lineSizeBytes;
        4:  107:        block[address].address = 1;
        4:  108:        Line emptyLine = Line();
        4:  109:        emptyLine[0] = 1024;
        4:  110:        block[address].dataLine = emptyLine;
        -:  111:    }
        -:  112:
        1:  113:    ASSERT_EQ(cache.Response(20), 19);
        1:  113-block  0
        1:  113-block  1
        1:  113-block  2
    $$$$$:  113-block  3
    $$$$$:  113-block  4
    $$$$$:  113-block  5
    $$$$$:  113-block  6
        1:  113-block  7
        1:  113-block  8
        1:  113-block  9
    %%%%%:  113-block 10
    %%%%%:  113-block 11
    %%%%%:  113-block 12
    %%%%%:  113-block 13
    %%%%%:  113-block 14
    %%%%%:  113-block 15
    %%%%%:  113-block 16
    %%%%%:  113-block 17
    %%%%%:  113-block 18
    %%%%%:  113-block 19
        1:  114:    ASSERT_EQ(cache.getCodeMemory()[0][0].lastUsage, 1);
        1:  114-block  0
    $$$$$:  114-block  1
        1:  114-block  2
    $$$$$:  114-block  3
    $$$$$:  114-block  4
    $$$$$:  114-block  5
    $$$$$:  114-block  6
        1:  114-block  7
        1:  114-block  8
        1:  114-block  9
    %%%%%:  114-block 10
    %%%%%:  114-block 11
    %%%%%:  114-block 12
    %%%%%:  114-block 13
    %%%%%:  114-block 14
    %%%%%:  114-block 15
    %%%%%:  114-block 16
    %%%%%:  114-block 17
        1:  115:    ASSERT_EQ(cache.getCodeMemory()[0][0].address, ToLineAddr(requestedId));
        1:  115-block  0
    $$$$$:  115-block  1
        1:  115-block  2
    $$$$$:  115-block  3
    $$$$$:  115-block  4
    $$$$$:  115-block  5
    $$$$$:  115-block  6
        1:  115-block  7
        1:  115-block  8
        1:  115-block  9
    %%%%%:  115-block 10
    %%%%%:  115-block 11
    %%%%%:  115-block 12
    %%%%%:  115-block 13
    %%%%%:  115-block 14
    %%%%%:  115-block 15
    %%%%%:  115-block 16
        1:  116:    ASSERT_TRUE(cache.getCodeMemory()[0][0].validityBit);
        1:  116-block  0
    $$$$$:  116-block  1
    $$$$$:  116-block  2
    $$$$$:  116-block  3
    $$$$$:  116-block  4
    $$$$$:  116-block  5
    $$$$$:  116-block  6
        1:  116-block  7
        1:  116-block  8
        1:  116-block  9
    %%%%%:  116-block 10
    %%%%%:  116-block 11
    %%%%%:  116-block 12
    %%%%%:  116-block 13
    %%%%%:  116-block 14
    %%%%%:  116-block 15
    %%%%%:  116-block 16
    %%%%%:  116-block 17
    %%%%%:  116-block 18
        -:  117:
        1:  118:    ASSERT_EQ(cache.getMem().readLineFromMemory(0)[0], 1024);
        1:  118-block  0
    $$$$$:  118-block  1
        1:  118-block  2
    $$$$$:  118-block  3
    $$$$$:  118-block  4
    $$$$$:  118-block  5
    $$$$$:  118-block  6
        1:  118-block  7
        1:  118-block  8
        1:  118-block  9
        1:  118-block 10
    $$$$$:  118-block 11
        1:  118-block 12
    %%%%%:  118-block 13
    %%%%%:  118-block 14
    %%%%%:  118-block 15
    %%%%%:  118-block 16
    %%%%%:  118-block 17
    %%%%%:  118-block 18
    %%%%%:  118-block 19
    %%%%%:  118-block 20
    %%%%%:  118-block 21
        4:  119:}
        1:  119-block  0
        1:  119-block  1
        1:  119-block  2
        1:  119-block  3
        1:  119-block  4
        1:  119-block  5
