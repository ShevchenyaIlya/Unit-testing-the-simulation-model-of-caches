        -:    0:Source:/home/shevchenya/CLionProjects/CourseWorkCache/google_tests/pseudoLRU_tests.cpp
        -:    0:Graph:/home/shevchenya/CLionProjects/CourseWorkCache/cmake-build-debug/google_tests/CMakeFiles/google_tests_run.dir/pseudoLRU_tests.cpp.gcno
        -:    0:Data:/home/shevchenya/CLionProjects/CourseWorkCache/cmake-build-debug/google_tests/CMakeFiles/google_tests_run.dir/pseudoLRU_tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by shevchenya on 15/11/2020.
        -:    3://
        -:    4:
        -:    5:#include <memory>
        -:    6:
        -:    7:#include "gtest/gtest.h"
        -:    8:#include "../src/Memory.h"
        -:    9:
    #####:   10:class CacheMemoryFixture : public ::testing::Test {
    $$$$$:   10-block  0
    $$$$$:   10-block  1
    $$$$$:   10-block  2
    $$$$$:   10-block  3
    $$$$$:   10-block  4
    $$$$$:   10-block  5
        -:   11:protected:
    #####:   12:    void SetUp() override {
    $$$$$:   12-block  0
    #####:   13:        MemoryStorage mem ;
    $$$$$:   13-block  0
    %%%%%:   13-block  1
    #####:   14:        UncachedMem uncachedMem = UncachedMem (mem);
    $$$$$:   14-block  0
    %%%%%:   14-block  1
    #####:   15:        memModelPtr = std::make_unique<CachedMem> ( uncachedMem);
    $$$$$:   15-block  0
    #####:   16:    }
        -:   17:    std::unique_ptr<CachedMem> memModelPtr;
        -:   18:};
        -:   19:
        8:   20:TEST_F(CacheMemoryFixture, FindEntryTests) {
        1:   20-block  0
        1:   20-block  1
        1:   20-block  2
        1:   20-block  3
        1:   20-block  4
    %%%%%:   20-block  5
    %%%%%:   20-block  6
    %%%%%:   20-block  7
    %%%%%:   20-block  8
    %%%%%:   20-block  9
    %%%%%:   20-block 10
        1:   20-block 11
        1:   20-block 12
        1:   20-block 13
        1:   20-block 14
        1:   20-block 15
        2:   21:    CachedMem cache = *memModelPtr;
        1:   21-block  0
        1:   21-block  1
        1:   21-block  2
    $$$$$:   21-block  3
        1:   21-block  4
    %%%%%:   21-block  5
    %%%%%:   21-block  6
        1:   22:    pair<Word, Word> emptyValue(0, 0);
        -:   23:
        1:   24:    int requestedId = rand() % 1024;
        1:   24-block  0
        1:   25:    ASSERT_EQ(cache.findEntry(requestedId, true), emptyValue);
        1:   25-block  0
        1:   25-block  1
    $$$$$:   25-block  2
    $$$$$:   25-block  3
    $$$$$:   25-block  4
    $$$$$:   25-block  5
        1:   25-block  6
        1:   25-block  7
        1:   25-block  8
    %%%%%:   25-block  9
    %%%%%:   25-block 10
    %%%%%:   25-block 11
    %%%%%:   25-block 12
    %%%%%:   25-block 13
    %%%%%:   25-block 14
    %%%%%:   25-block 15
    %%%%%:   25-block 16
        1:   26:    ASSERT_EQ(cache.findEntry(requestedId, false), emptyValue);
        1:   26-block  0
    $$$$$:   26-block  1
        1:   26-block  2
        1:   26-block  3
    $$$$$:   26-block  4
    $$$$$:   26-block  5
    $$$$$:   26-block  6
    $$$$$:   26-block  7
        1:   26-block  8
        1:   26-block  9
        1:   26-block 10
    %%%%%:   26-block 11
    %%%%%:   26-block 12
    %%%%%:   26-block 13
    %%%%%:   26-block 14
    %%%%%:   26-block 15
    %%%%%:   26-block 16
    %%%%%:   26-block 17
    %%%%%:   26-block 18
        -:   27:
        1:   28:    int requestedBlock = rand() % blockCount;
        1:   28-block  0
        1:   29:    pair<Word, Word> destinationValue(requestedBlock, (requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes);
        1:   30:    cache.getDataMemory()[requestedBlock][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].address = requestedId;
        -:   31:
        1:   32:    ASSERT_EQ(cache.findEntry(requestedId, true), destinationValue);
    $$$$$:   32-block  0
        1:   32-block  1
        1:   32-block  2
    $$$$$:   32-block  3
    $$$$$:   32-block  4
    $$$$$:   32-block  5
    $$$$$:   32-block  6
        1:   32-block  7
        1:   32-block  8
        1:   32-block  9
    %%%%%:   32-block 10
    %%%%%:   32-block 11
    %%%%%:   32-block 12
    %%%%%:   32-block 13
    %%%%%:   32-block 14
    %%%%%:   32-block 15
    %%%%%:   32-block 16
    %%%%%:   32-block 17
        -:   33:
        1:   34:    destinationValue = pair<Word, Word>(requestedBlock, (requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes);
        1:   34-block  0
        1:   35:    cache.getCodeMemory()[requestedBlock][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].address = requestedId;
        -:   36:
        1:   37:    ASSERT_EQ(cache.findEntry(requestedId, false), destinationValue);
    $$$$$:   37-block  0
        1:   37-block  1
        1:   37-block  2
    $$$$$:   37-block  3
    $$$$$:   37-block  4
    $$$$$:   37-block  5
    $$$$$:   37-block  6
        1:   37-block  7
        1:   37-block  8
        1:   37-block  9
        1:   37-block 10
    $$$$$:   37-block 11
        1:   37-block 12
    %%%%%:   37-block 13
    %%%%%:   37-block 14
    %%%%%:   37-block 15
    %%%%%:   37-block 16
    %%%%%:   37-block 17
    %%%%%:   37-block 18
    %%%%%:   37-block 19
        -:   38:}
        -:   39:
        8:   40:TEST_F(CacheMemoryFixture, PseudoLRUFindingTestsEmptyCache) {
        1:   40-block  0
        1:   40-block  1
        1:   40-block  2
        1:   40-block  3
        1:   40-block  4
    %%%%%:   40-block  5
    %%%%%:   40-block  6
    %%%%%:   40-block  7
    %%%%%:   40-block  8
    %%%%%:   40-block  9
    %%%%%:   40-block 10
        1:   40-block 11
        1:   40-block 12
        1:   40-block 13
        1:   40-block 14
        1:   40-block 15
        2:   41:    CachedMem cache = *memModelPtr;
        1:   41-block  0
        1:   41-block  1
        1:   41-block  2
    $$$$$:   41-block  3
        1:   41-block  4
    %%%%%:   41-block  5
    %%%%%:   41-block  6
        -:   42:
        1:   43:    Word requestedId = rand() % 1024;
        1:   43-block  0
        1:   44:    pair<Word, Word> destinationValue(0, (requestedId % (dataCacheBytes / blockCount)) / lineSizeBytes);
        1:   45:    ASSERT_EQ(cache.pseudoLRUFinding(true, requestedId), destinationValue);
        1:   45-block  0
        1:   45-block  1
    $$$$$:   45-block  2
    $$$$$:   45-block  3
    $$$$$:   45-block  4
    $$$$$:   45-block  5
        1:   45-block  6
        1:   45-block  7
        1:   45-block  8
    %%%%%:   45-block  9
    %%%%%:   45-block 10
    %%%%%:   45-block 11
    %%%%%:   45-block 12
    %%%%%:   45-block 13
    %%%%%:   45-block 14
    %%%%%:   45-block 15
    %%%%%:   45-block 16
        -:   46:
        1:   47:    destinationValue = pair<Word, Word>(0, (requestedId % (codeCacheBytes / blockCount)) / lineSizeBytes);
        1:   47-block  0
        1:   48:    ASSERT_EQ(cache.pseudoLRUFinding(false, requestedId), destinationValue);
    $$$$$:   48-block  0
        1:   48-block  1
        1:   48-block  2
    $$$$$:   48-block  3
    $$$$$:   48-block  4
    $$$$$:   48-block  5
    $$$$$:   48-block  6
        1:   48-block  7
        1:   48-block  8
        1:   48-block  9
        1:   48-block 10
    $$$$$:   48-block 11
        1:   48-block 12
    %%%%%:   48-block 13
    %%%%%:   48-block 14
    %%%%%:   48-block 15
    %%%%%:   48-block 16
    %%%%%:   48-block 17
    %%%%%:   48-block 18
    %%%%%:   48-block 19
        -:   49:
        -:   50:}
        -:   51:
        8:   52:TEST_F(CacheMemoryFixture, PseudoLRUFindingTestsOneValueCache) {
        1:   52-block  0
        1:   52-block  1
        1:   52-block  2
        1:   52-block  3
        1:   52-block  4
    %%%%%:   52-block  5
    %%%%%:   52-block  6
    %%%%%:   52-block  7
    %%%%%:   52-block  8
    %%%%%:   52-block  9
    %%%%%:   52-block 10
        1:   52-block 11
        1:   52-block 12
        1:   52-block 13
        1:   52-block 14
        1:   52-block 15
        2:   53:    CachedMem cache = *memModelPtr;
        1:   53-block  0
        1:   53-block  1
        1:   53-block  2
    $$$$$:   53-block  3
        1:   53-block  4
    %%%%%:   53-block  5
    %%%%%:   53-block  6
        -:   54:
        1:   55:    Word requestedId = rand() % 1024;
        1:   55-block  0
        1:   56:    cache.getDataMemory()[0][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].lastUsage = 1;
        1:   57:    cache.getCodeMemory()[0][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].lastUsage = 1;
        -:   58:
        1:   59:    pair<Word, Word>destinationValue = pair<Word, Word>(1, (requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes);
        1:   60:    ASSERT_EQ(cache.pseudoLRUFinding(true, requestedId), destinationValue);
        1:   60-block  0
        1:   60-block  1
    $$$$$:   60-block  2
    $$$$$:   60-block  3
    $$$$$:   60-block  4
    $$$$$:   60-block  5
        1:   60-block  6
        1:   60-block  7
        1:   60-block  8
    %%%%%:   60-block  9
    %%%%%:   60-block 10
    %%%%%:   60-block 11
    %%%%%:   60-block 12
    %%%%%:   60-block 13
    %%%%%:   60-block 14
    %%%%%:   60-block 15
    %%%%%:   60-block 16
        1:   61:    destinationValue = pair<Word, Word>(1, (requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes);
        1:   61-block  0
        1:   62:    ASSERT_EQ(cache.pseudoLRUFinding(false, requestedId), destinationValue);
    $$$$$:   62-block  0
        1:   62-block  1
        1:   62-block  2
    $$$$$:   62-block  3
    $$$$$:   62-block  4
    $$$$$:   62-block  5
    $$$$$:   62-block  6
        1:   62-block  7
        1:   62-block  8
        1:   62-block  9
        1:   62-block 10
    $$$$$:   62-block 11
        1:   62-block 12
    %%%%%:   62-block 13
    %%%%%:   62-block 14
    %%%%%:   62-block 15
    %%%%%:   62-block 16
    %%%%%:   62-block 17
    %%%%%:   62-block 18
    %%%%%:   62-block 19
        -:   63:}
        -:   64:
        8:   65:TEST_F(CacheMemoryFixture, PseudoLRUFindingTestsFullCache) {
        1:   65-block  0
        1:   65-block  1
        1:   65-block  2
        1:   65-block  3
        1:   65-block  4
    %%%%%:   65-block  5
    %%%%%:   65-block  6
    %%%%%:   65-block  7
    %%%%%:   65-block  8
    %%%%%:   65-block  9
    %%%%%:   65-block 10
        1:   65-block 11
        1:   65-block 12
        1:   65-block 13
        1:   65-block 14
        1:   65-block 15
        2:   66:    CachedMem cache = *memModelPtr;
        1:   66-block  0
        1:   66-block  1
        1:   66-block  2
    $$$$$:   66-block  3
        1:   66-block  4
    %%%%%:   66-block  5
    %%%%%:   66-block  6
        -:   67:
        1:   68:    Word requestedId = rand() % 1024;
        1:   68-block  0
        1:   69:    Word destinationId = rand() % blockCount;
        5:   70:    for (int i = 0; i < cache.getDataMemory().size(); i++) {
        5:   70-block  0
        4:   70-block  1
        4:   71:        cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].validityBit = true;
        4:   71-block  0
        4:   72:        if (i != destinationId)
        3:   73:            cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].lastUsage = 1;
        3:   73-block  0
        -:   74:    }
        -:   75:
        1:   76:    pair<Word, Word>destinationValue = pair<Word, Word>(destinationId, (requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes);
        1:   76-block  0
        1:   77:    ASSERT_EQ(cache.pseudoLRUFinding(true, requestedId), destinationValue);
        1:   77-block  0
        1:   77-block  1
    $$$$$:   77-block  2
    $$$$$:   77-block  3
    $$$$$:   77-block  4
    $$$$$:   77-block  5
        1:   77-block  6
        1:   77-block  7
        1:   77-block  8
    %%%%%:   77-block  9
    %%%%%:   77-block 10
    %%%%%:   77-block 11
    %%%%%:   77-block 12
    %%%%%:   77-block 13
    %%%%%:   77-block 14
    %%%%%:   77-block 15
    %%%%%:   77-block 16
        -:   78:
        5:   79:    for (int i = 0; i < cache.getCodeMemory().size(); i++) {
        1:   79-block  0
    $$$$$:   79-block  1
        5:   79-block  2
        4:   79-block  3
        4:   80:        cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].validityBit = true;
        4:   80-block  0
        4:   81:        if (i != destinationId)
        3:   82:            cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].lastUsage = 1;
        3:   82-block  0
        -:   83:    }
        -:   84:
        1:   85:    destinationValue = pair<Word, Word>(destinationId, (requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes);
        1:   85-block  0
        1:   86:    ASSERT_EQ(cache.pseudoLRUFinding(false, requestedId), destinationValue);
        1:   86-block  0
        1:   86-block  1
    $$$$$:   86-block  2
    $$$$$:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
        1:   86-block  6
        1:   86-block  7
        1:   86-block  8
        1:   86-block  9
    $$$$$:   86-block 10
        1:   86-block 11
    %%%%%:   86-block 12
    %%%%%:   86-block 13
    %%%%%:   86-block 14
    %%%%%:   86-block 15
    %%%%%:   86-block 16
    %%%%%:   86-block 17
    %%%%%:   86-block 18
        -:   87:}
        -:   88:
        8:   89:TEST_F(CacheMemoryFixture, PseudoLRUFindingTestsCacheUpdate) {
        1:   89-block  0
        1:   89-block  1
        1:   89-block  2
        1:   89-block  3
        1:   89-block  4
    %%%%%:   89-block  5
    %%%%%:   89-block  6
    %%%%%:   89-block  7
    %%%%%:   89-block  8
    %%%%%:   89-block  9
    %%%%%:   89-block 10
        1:   89-block 11
        1:   89-block 12
        1:   89-block 13
        1:   89-block 14
        1:   89-block 15
        2:   90:    CachedMem cache = *memModelPtr;
        1:   90-block  0
        1:   90-block  1
        1:   90-block  2
    $$$$$:   90-block  3
        1:   90-block  4
    %%%%%:   90-block  5
    %%%%%:   90-block  6
        -:   91:
        1:   92:    Word requestedId = rand() % 1024;
        1:   92-block  0
        1:   93:    Word destinationId = rand() % blockCount;
        5:   94:    for (int i = 0; i < cache.getDataMemory().size(); i++) {
        5:   94-block  0
        4:   94-block  1
        4:   95:        cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].validityBit = true;
        4:   95-block  0
        4:   96:        if (i != destinationId)
        3:   97:            cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].lastUsage = 1;
        3:   97-block  0
        -:   98:    }
        -:   99:
        1:  100:    pair<Word, Word> result = cache.pseudoLRUFinding(true, requestedId);
        1:  100-block  0
        1:  101:    cache.changeLRUBit(cache.getDataMemory(), result.first, result.second);
        1:  101-block  0
        5:  102:    for (int i = 0; i < cache.getDataMemory().size(); i++) {
        5:  102-block  0
        4:  102-block  1
    $$$$$:  102-block  2
        4:  103:        ASSERT_EQ(cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].lastUsage, 0);
        4:  103-block  0
        4:  103-block  1
    $$$$$:  103-block  2
    $$$$$:  103-block  3
    $$$$$:  103-block  4
    $$$$$:  103-block  5
        4:  103-block  6
        4:  103-block  7
        4:  103-block  8
    %%%%%:  103-block  9
    %%%%%:  103-block 10
    %%%%%:  103-block 11
    %%%%%:  103-block 12
    %%%%%:  103-block 13
    %%%%%:  103-block 14
    %%%%%:  103-block 15
    %%%%%:  103-block 16
        -:  104:    }
        -:  105:
        5:  106:    for (int i = 0; i < cache.getCodeMemory().size(); i++) {
        1:  106-block  0
        5:  106-block  1
        4:  106-block  2
        4:  107:        cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].validityBit = true;
        4:  107-block  0
        4:  108:        if (i != destinationId)
        3:  109:            cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].lastUsage = 1;
        3:  109-block  0
        -:  110:    }
        -:  111:
        1:  112:    result = cache.pseudoLRUFinding(false, requestedId);
        1:  112-block  0
        1:  112-block  1
        1:  113:    cache.changeLRUBit(cache.getCodeMemory(), result.first, result.second);
        5:  114:    for (int i = 0; i < cache.getCodeMemory().size(); i++) {
        5:  114-block  0
        4:  114-block  1
    $$$$$:  114-block  2
        1:  114-block  3
        1:  114-block  4
        4:  115:        ASSERT_EQ(cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].lastUsage, 0);
        4:  115-block  0
        4:  115-block  1
    $$$$$:  115-block  2
    $$$$$:  115-block  3
    $$$$$:  115-block  4
    $$$$$:  115-block  5
        4:  115-block  6
        4:  115-block  7
        4:  115-block  8
    %%%%%:  115-block  9
    %%%%%:  115-block 10
    %%%%%:  115-block 11
    %%%%%:  115-block 12
    %%%%%:  115-block 13
    %%%%%:  115-block 14
    %%%%%:  115-block 15
        -:  116:    }
        -:  117:}
        -:  118:
        8:  119:TEST_F(CacheMemoryFixture, PseudoLRUFindingTestsChooseChangedLine) {
        1:  119-block  0
        1:  119-block  1
        1:  119-block  2
        1:  119-block  3
        1:  119-block  4
    %%%%%:  119-block  5
    %%%%%:  119-block  6
    %%%%%:  119-block  7
    %%%%%:  119-block  8
    %%%%%:  119-block  9
        1:  119-block 10
        1:  119-block 11
        1:  119-block 12
        1:  119-block 13
        1:  119-block 14
        2:  120:    CachedMem cache = *memModelPtr;
        1:  120-block  0
        1:  120-block  1
        1:  120-block  2
    $$$$$:  120-block  3
        1:  120-block  4
    %%%%%:  120-block  5
    %%%%%:  120-block  6
        -:  121:
        1:  122:    Word requestedId = rand() % 1024;
        1:  122-block  0
        1:  123:    Word destinationId = rand() % blockCount;
        -:  124:
        5:  125:    for (int i = 0; i < cache.getDataMemory().size(); i++) {
        5:  125-block  0
        4:  126:        cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].address = i + 1;
        4:  126-block  0
        4:  127:        cache.getDataMemory()[i][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].validityBit = true;
        -:  128:    }
        -:  129:
        1:  130:    pair<Word, Word>destinationValue = pair<Word, Word>(destinationId, (requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes);
        1:  130-block  0
        1:  131:    cache.getDataMemory()[destinationId][(requestedId % ( dataCacheBytes / blockCount)) / lineSizeBytes].validityBit = false;
        1:  132:    ASSERT_EQ(cache.pseudoLRUFinding(true, requestedId), destinationValue);
        1:  132-block  0
        1:  132-block  1
    $$$$$:  132-block  2
    $$$$$:  132-block  3
    $$$$$:  132-block  4
    $$$$$:  132-block  5
        1:  132-block  6
        1:  132-block  7
        1:  132-block  8
    %%%%%:  132-block  9
    %%%%%:  132-block 10
    %%%%%:  132-block 11
    %%%%%:  132-block 12
    %%%%%:  132-block 13
    %%%%%:  132-block 14
    %%%%%:  132-block 15
    %%%%%:  132-block 16
        -:  133:
        5:  134:    for (int i = 0; i < cache.getCodeMemory().size(); i++) {
        1:  134-block  0
    $$$$$:  134-block  1
        5:  134-block  2
        4:  135:        cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].address = i + 1;
        4:  135-block  0
        4:  136:        cache.getCodeMemory()[i][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].validityBit = true;
        -:  137:    }
        -:  138:
        1:  139:    destinationValue = pair<Word, Word>(destinationId, (requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes);
        1:  139-block  0
        1:  140:    cache.getCodeMemory()[destinationId][(requestedId % ( codeCacheBytes / blockCount)) / lineSizeBytes].validityBit = false;
        1:  141:    ASSERT_EQ(cache.pseudoLRUFinding(false, requestedId), destinationValue);
        1:  141-block  0
        1:  141-block  1
    $$$$$:  141-block  2
    $$$$$:  141-block  3
    $$$$$:  141-block  4
    $$$$$:  141-block  5
        1:  141-block  6
        1:  141-block  7
        1:  141-block  8
        1:  141-block  9
    $$$$$:  141-block 10
        1:  141-block 11
    %%%%%:  141-block 12
    %%%%%:  141-block 13
    %%%%%:  141-block 14
    %%%%%:  141-block 15
    %%%%%:  141-block 16
    %%%%%:  141-block 17
    %%%%%:  141-block 18
        4:  142:}
        1:  142-block  0
        1:  142-block  1
        1:  142-block  2
        1:  142-block  3
        1:  142-block  4
        1:  142-block  5
