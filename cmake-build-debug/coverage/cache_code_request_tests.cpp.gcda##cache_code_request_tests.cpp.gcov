        -:    0:Source:/home/shevchenya/CLionProjects/CourseWorkCache/google_tests/cache_code_request_tests.cpp
        -:    0:Graph:/home/shevchenya/CLionProjects/CourseWorkCache/cmake-build-debug/google_tests/CMakeFiles/google_tests_run.dir/cache_code_request_tests.cpp.gcno
        -:    0:Data:/home/shevchenya/CLionProjects/CourseWorkCache/cmake-build-debug/google_tests/CMakeFiles/google_tests_run.dir/cache_code_request_tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by shevchenya on 15/11/2020.
        -:    3://
        -:    4:
        -:    5:#include <random>
        -:    6:
        -:    7:#include "gtest/gtest.h"
        -:    8:#include "../src/Memory.h"
        -:    9:
    #####:   10:class CacheMemoryFixture : public ::testing::Test {
    $$$$$:   10-block  0
    $$$$$:   10-block  1
    $$$$$:   10-block  2
    $$$$$:   10-block  3
    $$$$$:   10-block  4
    $$$$$:   10-block  5
        -:   11:protected:
    #####:   12:    void SetUp() override {
    $$$$$:   12-block  0
    #####:   13:        MemoryStorage mem ;
    $$$$$:   13-block  0
    %%%%%:   13-block  1
    #####:   14:        UncachedMem uncachedMem = UncachedMem (mem);
    $$$$$:   14-block  0
    %%%%%:   14-block  1
    #####:   15:        memModelPtr = std::make_unique<CachedMem> ( uncachedMem);
    $$$$$:   15-block  0
    #####:   16:    }
        -:   17:    std::unique_ptr<CachedMem> memModelPtr;
        -:   18:};
        -:   19:
        8:   20:TEST_F(CacheMemoryFixture, waitRequest) {
        1:   20-block  0
        1:   20-block  1
        1:   20-block  2
        1:   20-block  3
        1:   20-block  4
    %%%%%:   20-block  5
    %%%%%:   20-block  6
    %%%%%:   20-block  7
    %%%%%:   20-block  8
    %%%%%:   20-block  9
    %%%%%:   20-block 10
        1:   20-block 11
        1:   20-block 12
        1:   20-block 13
        1:   20-block 14
        1:   20-block 15
        2:   21:    CachedMem cache = *memModelPtr;
        1:   21-block  0
        1:   21-block  1
        1:   21-block  2
    $$$$$:   21-block  3
        1:   21-block  4
    %%%%%:   21-block  5
    %%%%%:   21-block  6
        -:   22:
        1:   23:    cache.setMemoryRequestIp(512);
        1:   23-block  0
        1:   24:    cache.Request(512);
        1:   25:    ASSERT_EQ(cache.getRequestedIp(), 0);
        1:   25-block  0
        1:   25-block  1
    $$$$$:   25-block  2
    $$$$$:   25-block  3
    $$$$$:   25-block  4
    $$$$$:   25-block  5
        1:   25-block  6
        1:   25-block  7
        1:   25-block  8
    %%%%%:   25-block  9
    %%%%%:   25-block 10
    %%%%%:   25-block 11
    %%%%%:   25-block 12
    %%%%%:   25-block 13
    %%%%%:   25-block 14
    %%%%%:   25-block 15
    %%%%%:   25-block 16
    %%%%%:   25-block 17
    %%%%%:   25-block 18
        1:   26:    ASSERT_EQ(cache.getRequestedOffset(), 0);
        1:   26-block  0
    $$$$$:   26-block  1
        1:   26-block  2
    $$$$$:   26-block  3
    $$$$$:   26-block  4
    $$$$$:   26-block  5
    $$$$$:   26-block  6
        1:   26-block  7
        1:   26-block  8
        1:   26-block  9
        1:   26-block 10
    $$$$$:   26-block 11
        1:   26-block 12
    %%%%%:   26-block 13
    %%%%%:   26-block 14
    %%%%%:   26-block 15
    %%%%%:   26-block 16
    %%%%%:   26-block 17
    %%%%%:   26-block 18
    %%%%%:   26-block 19
    %%%%%:   26-block 20
    %%%%%:   26-block 21
        -:   27:}
        -:   28:
        8:   29:TEST_F(CacheMemoryFixture, lineInCache) {
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
        1:   29-block  3
        1:   29-block  4
    %%%%%:   29-block  5
    %%%%%:   29-block  6
    %%%%%:   29-block  7
    %%%%%:   29-block  8
    %%%%%:   29-block  9
    %%%%%:   29-block 10
        1:   29-block 11
        1:   29-block 12
        1:   29-block 13
        1:   29-block 14
        1:   29-block 15
        2:   30:    CachedMem cache = *memModelPtr;
        1:   30-block  0
        1:   30-block  1
        1:   30-block  2
    $$$$$:   30-block  3
        1:   30-block  4
    %%%%%:   30-block  5
        -:   31:
        1:   32:    int blockLine = rand() % blockCount;
        1:   32-block  0
        1:   33:    Word requestedId = rand() % 1024;
        1:   34:    cache.getCodeMemory()[blockLine][requestedId % (codeCacheBytes / blockCount) / lineSizeBytes].address = ToLineAddr(requestedId);
        1:   35:    cache.Request(requestedId);
        1:   36:    ASSERT_FALSE(cache.isCacheMiss());
        1:   36-block  0
    $$$$$:   36-block  1
    $$$$$:   36-block  2
    $$$$$:   36-block  3
    $$$$$:   36-block  4
    $$$$$:   36-block  5
        1:   36-block  6
        1:   36-block  7
        1:   36-block  8
    %%%%%:   36-block  9
    %%%%%:   36-block 10
    %%%%%:   36-block 11
    %%%%%:   36-block 12
    %%%%%:   36-block 13
    %%%%%:   36-block 14
    %%%%%:   36-block 15
    %%%%%:   36-block 16
    %%%%%:   36-block 17
        1:   37:    ASSERT_EQ(cache.getWaitCycles(), cache.getCodeLatency());
        1:   37-block  0
    $$$$$:   37-block  1
        1:   37-block  2
    $$$$$:   37-block  3
    $$$$$:   37-block  4
    $$$$$:   37-block  5
    $$$$$:   37-block  6
        1:   37-block  7
        1:   37-block  8
        1:   37-block  9
    %%%%%:   37-block 10
    %%%%%:   37-block 11
    %%%%%:   37-block 12
    %%%%%:   37-block 13
    %%%%%:   37-block 14
    %%%%%:   37-block 15
    %%%%%:   37-block 16
    %%%%%:   37-block 17
    %%%%%:   37-block 18
    %%%%%:   37-block 19
        1:   38:    ASSERT_EQ(cache.getRequestedIp(), ToLineAddr(requestedId));
        1:   38-block  0
    $$$$$:   38-block  1
        1:   38-block  2
    $$$$$:   38-block  3
    $$$$$:   38-block  4
    $$$$$:   38-block  5
    $$$$$:   38-block  6
        1:   38-block  7
        1:   38-block  8
        1:   38-block  9
    %%%%%:   38-block 10
    %%%%%:   38-block 11
    %%%%%:   38-block 12
    %%%%%:   38-block 13
    %%%%%:   38-block 14
    %%%%%:   38-block 15
    %%%%%:   38-block 16
    %%%%%:   38-block 17
    %%%%%:   38-block 18
    %%%%%:   38-block 19
        1:   39:    ASSERT_EQ(cache.getRequestedOffset(), ToLineOffset(requestedId));
        1:   39-block  0
    $$$$$:   39-block  1
        1:   39-block  2
    $$$$$:   39-block  3
    $$$$$:   39-block  4
    $$$$$:   39-block  5
    $$$$$:   39-block  6
        1:   39-block  7
        1:   39-block  8
        1:   39-block  9
        1:   39-block 10
    $$$$$:   39-block 11
        1:   39-block 12
    %%%%%:   39-block 13
    %%%%%:   39-block 14
    %%%%%:   39-block 15
    %%%%%:   39-block 16
    %%%%%:   39-block 17
    %%%%%:   39-block 18
    %%%%%:   39-block 19
    %%%%%:   39-block 20
    %%%%%:   39-block 21
        -:   40:}
        -:   41:
        8:   42:TEST_F(CacheMemoryFixture, lineNotInCache) {
        1:   42-block  0
        1:   42-block  1
        1:   42-block  2
        1:   42-block  3
        1:   42-block  4
    %%%%%:   42-block  5
    %%%%%:   42-block  6
    %%%%%:   42-block  7
    %%%%%:   42-block  8
    %%%%%:   42-block  9
        1:   42-block 10
        1:   42-block 11
        1:   42-block 12
        1:   42-block 13
        1:   42-block 14
        2:   43:    CachedMem cache = *memModelPtr;
        1:   43-block  0
        1:   43-block  1
        1:   43-block  2
    $$$$$:   43-block  3
        1:   43-block  4
    %%%%%:   43-block  5
        -:   44:
        1:   45:    int blockLine = rand() % blockCount;
        1:   45-block  0
        1:   46:    Word requestedId = rand() % 1024;
        1:   47:    cache.Request(requestedId);
        1:   48:    ASSERT_TRUE(cache.isCacheMiss());
        1:   48-block  0
    $$$$$:   48-block  1
    $$$$$:   48-block  2
    $$$$$:   48-block  3
    $$$$$:   48-block  4
    $$$$$:   48-block  5
        1:   48-block  6
        1:   48-block  7
        1:   48-block  8
    %%%%%:   48-block  9
    %%%%%:   48-block 10
    %%%%%:   48-block 11
    %%%%%:   48-block 12
    %%%%%:   48-block 13
    %%%%%:   48-block 14
    %%%%%:   48-block 15
    %%%%%:   48-block 16
    %%%%%:   48-block 17
        1:   49:    ASSERT_EQ(cache.getWaitCycles(), cache.getFailLatency());
        1:   49-block  0
    $$$$$:   49-block  1
        1:   49-block  2
    $$$$$:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
        1:   49-block  7
        1:   49-block  8
        1:   49-block  9
    %%%%%:   49-block 10
    %%%%%:   49-block 11
    %%%%%:   49-block 12
    %%%%%:   49-block 13
    %%%%%:   49-block 14
    %%%%%:   49-block 15
    %%%%%:   49-block 16
    %%%%%:   49-block 17
    %%%%%:   49-block 18
    %%%%%:   49-block 19
        1:   50:    ASSERT_EQ(cache.getRequestedIp(), ToLineAddr(requestedId));
        1:   50-block  0
    $$$$$:   50-block  1
        1:   50-block  2
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
    $$$$$:   50-block  6
        1:   50-block  7
        1:   50-block  8
        1:   50-block  9
    %%%%%:   50-block 10
    %%%%%:   50-block 11
    %%%%%:   50-block 12
    %%%%%:   50-block 13
    %%%%%:   50-block 14
    %%%%%:   50-block 15
    %%%%%:   50-block 16
    %%%%%:   50-block 17
    %%%%%:   50-block 18
    %%%%%:   50-block 19
        1:   51:    ASSERT_EQ(cache.getRequestedOffset(), ToLineOffset(requestedId));
        1:   51-block  0
    $$$$$:   51-block  1
        1:   51-block  2
    $$$$$:   51-block  3
    $$$$$:   51-block  4
    $$$$$:   51-block  5
    $$$$$:   51-block  6
        1:   51-block  7
        1:   51-block  8
        1:   51-block  9
        1:   51-block 10
    $$$$$:   51-block 11
        1:   51-block 12
    %%%%%:   51-block 13
    %%%%%:   51-block 14
    %%%%%:   51-block 15
    %%%%%:   51-block 16
    %%%%%:   51-block 17
    %%%%%:   51-block 18
    %%%%%:   51-block 19
    %%%%%:   51-block 20
    %%%%%:   51-block 21
        4:   52:}
        1:   52-block  0
        1:   52-block  1
        1:   52-block  2
        1:   52-block  3
        1:   52-block  4
        1:   52-block  5
